{"version":3,"file":"static/js/625.394ae7d0.chunk.js","mappings":"6SAEMA,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BAETC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,WAAOC,GAAP,+EACT,QACC,OAFQ,SAGJN,EAASO,IAAT,oBAFL,QAEK,YADJ,OACI,iBACwBD,IAJpB,uBAGnBE,EAHmB,EAGnBA,KAHmB,kBAMpBA,GANoB,2CAAH,sDASbC,EAAW,mCAAG,WAAOH,EAAOI,GAAd,yFACFV,EAASO,IAAT,6BAAmCD,EAAnC,kBAAiDI,IAD/C,uBACjBF,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,wDAUXG,EAAc,mCAAG,WAAOC,GAAP,yFACLZ,EAASO,IAAT,iBAAuBK,IADlB,uBACpBJ,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdK,EAAY,mCAAG,WAAOC,GAAP,yFACHd,EAASO,IAAT,iBAAuBO,EAAvB,aADG,uBAClBN,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZO,EAAY,mCAAG,WAAOH,GAAP,yFACHZ,EAASO,IAAT,iBAAuBK,EAAvB,aADG,uBAClBJ,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,qD,mICuCzB,UAtE2B,WAAO,IAAD,EAC/B,GAAkCQ,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQN,GAAYO,EAAAA,EAAAA,MAAZP,QACFQ,GAAWC,EAAAA,EAAAA,MAGXC,GAAO,WAFIC,EAAAA,EAAAA,MAEKC,aAAT,eAAgBF,OAAQ,KAErCG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAuB,mCAAG,WAAMC,GAAN,mGAEPlB,EAAAA,EAAAA,IAAekB,GAFR,OAEtBC,EAFsB,OAG5BZ,EAAaY,GAHe,gDAInBC,EAJmB,KAInBA,SACTC,QAAQC,IAAIF,EAASvB,KAAK0B,SAC1Bd,GAAS,GANmB,yDAAH,sDAS7BQ,EAAwBd,EACzB,GAAE,CAACA,IAIJ,OACE,6BACE,mBAAQqB,QAJG,kBAAMb,EAASE,EAAf,EAIX,qBACCL,IAAS,SAAC,UAAD,IACTF,IACC,iCACE,gBACEmB,IACEnB,EAAUoB,YAAV,0CACuCpB,EAAUoB,aAC7C,kCAENC,IAAKrB,EAAUsB,WAEjB,4BACE,2BACE,0BAAOtB,EAAUuB,SACjB,qCAAWvB,EAAUwB,aAAaC,MAAM,EAAG,GAA3C,WAEF,0BACE,uCACCzB,EAAU0B,aAEb,0BACE,sCACA,0BACG1B,EAAU2B,QACT3B,EAAU2B,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,kBAM3D,4BACE,SAAC,KAAD,CAAMC,GAAG,OAAOvB,MAAO,CAAEF,KAAAA,GAAzB,mBAGA,SAAC,KAAD,CAAMyB,GAAG,UAAUvB,MAAO,CAAEF,KAAAA,GAA5B,yBAIF,SAAC,KAAD,MAGL,C,0CCvED,UALqB,WACnB,OACE,0CAEH,C","sources":["Api/api.js","components/pages/MoviesInformation/MoviesInformations.jsx","components/pages/NotFoundPage/NotFoundPage.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: 'ac91775ba29254b7e75060011bf34a90',\n  },\n});\n\nexport const fetchTrending = async (page) => {\n  const mediaType = 'movie';\n  const timeWindow = 'week';\n  const { data } = await instance.get(\n    `/trending/${mediaType}/${timeWindow}?page=${page}`\n  );\n  return data;\n};\n\nexport const fetchMovies = async (page , query) => {\n  const { data } = await instance.get(`/search/movie?page=${page}&query=${query}`);\n  return data;\n};\n\nexport const fetchGenres = async () => {\n  const { data } = await instance.get(`/genre/movie/list`);\n  return data.genres;\n};\n\nexport const fetchMovieById = async (movieID) => {\n  const { data } = await instance.get(`/movie/${movieID}`);\n  return data;\n};\n\nexport const fetchCredits = async (movieId) => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const fetchReviews = async (movieID) => {\n  const { data } = await instance.get(`/movie/${movieID}/reviews`);\n  return data;\n};\n","import { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Link, Outlet } from 'react-router-dom';\n\nimport { fetchMovieById } from 'Api/api';\n\nimport NotFoundPage from '../NotFoundPage/NotFoundPage';\n\nconst MoviesInformations = () => {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const from = location.state?.from || '/';\n\n  useEffect(() => {\n    const fetchMoviesInformations = async id => {\n      try {\n        const result = await fetchMovieById(id);\n        setMovieInfo(result);\n      } catch ({ response }) {\n        console.log(response.data.message);\n        setError(true);\n      }\n    };\n    fetchMoviesInformations(movieId);\n  }, [movieId]);\n\n  const goBack = () => navigate(from);\n\n  return (\n    <main>\n      <button onClick={goBack}>Go Back</button>\n      {error && <NotFoundPage />}\n      {movieInfo && (\n        <>\n          <img\n            src={\n              movieInfo.poster_path\n                ? `https://image.tmdb.org/t/p/w200/${movieInfo.poster_path}`\n                : 'https://via.placeholder.com/200'\n            }\n            alt={movieInfo.tagline}\n          />\n          <div>\n            <h1>\n              <span>{movieInfo.title}</span>\n              <span>{`(${movieInfo.release_date.slice(0, 4)})`}</span>\n            </h1>\n            <p>\n              <span>Overview</span>\n              {movieInfo.overview}\n            </p>\n            <p>\n              <span>Genre:</span>\n              <span>\n                {movieInfo.genres &&\n                  movieInfo.genres.map(genre => genre.name).join(', ')}\n              </span>\n            </p>\n          </div>\n        </>\n      )}\n      <div>\n        <Link to=\"cast\" state={{ from }}>\n          Cast\n        </Link>\n        <Link to=\"reviews\" state={{ from }}>\n          Reviews\n        </Link>\n      </div>\n      <Outlet />\n    </main>\n  );\n};\n\nexport default MoviesInformations;\n","const NotFoundPage = () => {\n  return (\n    <h1>Not Found Page</h1>\n  )\n}\nexport default NotFoundPage;\n"],"names":["instance","axios","baseURL","params","api_key","fetchTrending","page","get","data","fetchMovies","query","fetchMovieById","movieID","fetchCredits","movieId","fetchReviews","useState","movieInfo","setMovieInfo","error","setError","useParams","navigate","useNavigate","from","useLocation","state","useEffect","fetchMoviesInformations","id","result","response","console","log","message","onClick","src","poster_path","alt","tagline","title","release_date","slice","overview","genres","map","genre","name","join","to"],"sourceRoot":""}