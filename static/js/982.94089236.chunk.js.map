{"version":3,"file":"static/js/982.94089236.chunk.js","mappings":"6SAEMA,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BAETC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,WAAOC,GAAP,+EACT,QACC,OAFQ,SAGJN,EAASO,IAAT,oBAFL,QAEK,YADJ,OACI,iBACwBD,IAJpB,uBAGnBE,EAHmB,EAGnBA,KAHmB,kBAMpBA,GANoB,2CAAH,sDASbC,EAAW,mCAAG,WAAOH,EAAOI,GAAd,yFACFV,EAASO,IAAT,6BAAmCD,EAAnC,kBAAiDI,IAD/C,uBACjBF,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,wDAUXG,EAAc,mCAAG,WAAOC,GAAP,yFACLZ,EAASO,IAAT,iBAAuBK,IADlB,uBACpBJ,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdK,EAAY,mCAAG,WAAOC,GAAP,yFACHd,EAASO,IAAT,iBAAuBO,EAAvB,aADG,uBAClBN,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZO,EAAY,mCAAG,WAAOH,GAAP,yFACHZ,EAASO,IAAT,iBAAuBK,EAAvB,aADG,uBAClBJ,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,qD,6KCrCZQ,EAAaC,EAAAA,GAAAA,GAAH,uEAKVC,EAAiBD,EAAAA,GAAAA,GAAF,2D,SCItBE,EAAiB,WACrB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQV,GAAYW,EAAAA,EAAAA,MAAZX,QAeR,OAbAY,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,WAAMC,GAAN,qGAEIb,EAAAA,EAAAA,IAAaD,GAFjB,gBAEde,EAFc,EAEdA,QACRP,EAAWO,GAHW,gDAIbC,EAJa,KAIbA,SACTN,GAAS,GACTO,QAAQC,IAAIF,EAAStB,KAAKyB,SANJ,yDAAH,sDASvBN,EAAkBb,EACnB,GAAE,CAACA,KAGF,gCACCS,IAAS,SAACW,EAAA,QAAD,IACTb,EAAQc,QACP,SAACnB,EAAD,UACGK,EAAQe,KAAI,gBAAGR,EAAH,EAAGA,GAAIS,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,yBACE,4BACE,SAACpB,EAAD,UAAkBmB,KAClB,uBAAIC,QAHCV,EADE,OAUf,wCAIL,EAEDT,EAAeoB,aAAe,GAS9B,O,0CCtDA,UALqB,WACnB,OACE,0CAEH,C","sources":["Api/api.js","components/MovieReviewers/MovieRewiewers.styled.js","components/MovieReviewers/MovieReviewers.jsx","components/pages/NotFoundPage/NotFoundPage.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: '654dca5a8217a14f67a4e1bec4dc984e',\n  },\n});\n\nexport const fetchTrending = async (page) => {\n  const mediaType = 'movie';\n  const timeWindow = 'week';\n  const { data } = await instance.get(\n    `/trending/${mediaType}/${timeWindow}?page=${page}`\n  );\n  return data;\n};\n\nexport const fetchMovies = async (page , query) => {\n  const { data } = await instance.get(`/search/movie?page=${page}&query=${query}`);\n  return data;\n};\n\nexport const fetchGenres = async () => {\n  const { data } = await instance.get(`/genre/movie/list`);\n  return data.genres;\n};\n\nexport const fetchMovieById = async (movieID) => {\n  const { data } = await instance.get(`/movie/${movieID}`);\n  return data;\n};\n\nexport const fetchCredits = async (movieId) => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const fetchReviews = async (movieID) => {\n  const { data } = await instance.get(`/movie/${movieID}/reviews`);\n  return data;\n};\n","import styled from \"styled-components\";\n\nexport const ReviewList = styled.ul`\ndisplay:flex;\nflex-direction:column;\ngap:15px`;\n\nexport const ReviewAutorName =styled.h2`\nfont-size:18px;\nfont-weight:600;\n`\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n\nimport NotFoundPage from 'components/pages/NotFoundPage/NotFoundPage';\n\nimport { fetchReviews } from 'Api/api';\n\nimport {ReviewList, ReviewAutorName} from './MovieRewiewers.styled'\n\nconst MovieRewiewers = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieReviews = async id => {\n      try {\n        const { results } = await fetchReviews(movieId);\n        setReviews(results);\n      } catch ({ response }) {\n        setError(true);\n        console.log(response.data.message);\n      }\n    };\n    fetchMovieReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n    {error && <NotFoundPage />}\n    {reviews.length ? (\n      <ReviewList>\n        {reviews.map(({ id, author, content }) => (\n          <li key={id}>\n            <div>\n              <ReviewAutorName>{author}</ReviewAutorName>\n              <p>{content}</p>\n            </div>\n          </li>\n        ))}\n      </ReviewList>\n    ) : (\n      <p>No results</p>\n    )}\n  </>\n  );\n};\n\nMovieRewiewers.defaultProps = [];\n\nMovieRewiewers.propTypes = {\n  id: PropTypes.number,\n  autor: PropTypes.string,\n  content:PropTypes.string,\n}\n\n\nexport default MovieRewiewers;\n","const NotFoundPage = () => {\n  return (\n    <h1>Not Found Page</h1>\n  )\n}\nexport default NotFoundPage;\n"],"names":["instance","axios","baseURL","params","api_key","fetchTrending","page","get","data","fetchMovies","query","fetchMovieById","movieID","fetchCredits","movieId","fetchReviews","ReviewList","styled","ReviewAutorName","MovieRewiewers","useState","reviews","setReviews","error","setError","useParams","useEffect","fetchMovieReviews","id","results","response","console","log","message","NotFoundPage","length","map","author","content","defaultProps"],"sourceRoot":""}