{"version":3,"file":"static/js/715.25853c3d.chunk.js","mappings":"6SAEMA,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BAETC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,WAAOC,GAAP,+EACT,QACC,OAFQ,SAGJN,EAASO,IAAT,oBAFL,QAEK,YADJ,OACI,iBACwBD,IAJpB,uBAGnBE,EAHmB,EAGnBA,KAHmB,kBAMpBA,GANoB,2CAAH,sDASbC,EAAW,mCAAG,WAAOH,EAAOI,GAAd,yFACFV,EAASO,IAAT,6BAAmCD,EAAnC,kBAAiDI,IAD/C,uBACjBF,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,wDAUXG,EAAc,mCAAG,WAAOC,GAAP,yFACLZ,EAASO,IAAT,iBAAuBK,IADlB,uBACpBJ,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdK,EAAY,mCAAG,WAAOC,GAAP,yFACHd,EAASO,IAAT,iBAAuBO,EAAvB,aADG,uBAClBN,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZO,EAAY,mCAAG,WAAOH,GAAP,yFACHZ,EAASO,IAAT,iBAAuBK,EAAvB,aADG,uBAClBJ,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,qD,yHCYzB,UA5CuB,WACrB,OAA8BQ,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQN,GAAYO,EAAAA,EAAAA,MAAZP,QAeR,OAbAQ,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,WAAMC,GAAN,qGAEIT,EAAAA,EAAAA,IAAaD,GAFjB,gBAEdW,EAFc,EAEdA,QACRP,EAAWO,GAHW,gDAIbC,EAJa,KAIbA,SACTN,GAAS,GACTO,QAAQC,IAAIF,EAASlB,KAAKqB,SANJ,yDAAH,sDASvBN,EAAkBT,EACnB,GAAE,CAACA,KAGF,4BACE,mCAECK,IAAS,SAAC,UAAD,KAEV,yBACGF,EAAQa,QACP,wBACGb,EAAQc,KAAI,gBAAGP,EAAH,EAAGA,GAAIQ,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,yBACE,4BACE,uBAAID,KACJ,uBAAIC,QAHCT,EADE,OAUf,0CAKT,C,0CC5CD,UALqB,WACnB,OACE,0CAEH,C","sources":["Api/api.js","components/MovieReviewers/MovieReviewers.jsx","components/pages/NotFoundPage/NotFoundPage.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: 'ac91775ba29254b7e75060011bf34a90',\n  },\n});\n\nexport const fetchTrending = async (page) => {\n  const mediaType = 'movie';\n  const timeWindow = 'week';\n  const { data } = await instance.get(\n    `/trending/${mediaType}/${timeWindow}?page=${page}`\n  );\n  return data;\n};\n\nexport const fetchMovies = async (page , query) => {\n  const { data } = await instance.get(`/search/movie?page=${page}&query=${query}`);\n  return data;\n};\n\nexport const fetchGenres = async () => {\n  const { data } = await instance.get(`/genre/movie/list`);\n  return data.genres;\n};\n\nexport const fetchMovieById = async (movieID) => {\n  const { data } = await instance.get(`/movie/${movieID}`);\n  return data;\n};\n\nexport const fetchCredits = async (movieId) => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const fetchReviews = async (movieID) => {\n  const { data } = await instance.get(`/movie/${movieID}/reviews`);\n  return data;\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport NotFoundPage from 'components/pages/NotFoundPage/NotFoundPage';\n\nimport { fetchReviews } from 'Api/api';\n\nconst MovieRewiewers = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieReviews = async id => {\n      try {\n        const { results } = await fetchReviews(movieId);\n        setReviews(results);\n      } catch ({ response }) {\n        setError(true);\n        console.log(response.data.message);\n      }\n    };\n    fetchMovieReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Review</h2>\n\n      {error && <NotFoundPage />}\n\n      <div>\n        {reviews.length ? (\n          <ul>\n            {reviews.map(({ id, author, content }) => (\n              <li key={id}>\n                <div>\n                  <p>{author}</p>\n                  <p>{content}</p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>No results</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MovieRewiewers;\n","const NotFoundPage = () => {\n  return (\n    <h1>Not Found Page</h1>\n  )\n}\nexport default NotFoundPage;\n"],"names":["instance","axios","baseURL","params","api_key","fetchTrending","page","get","data","fetchMovies","query","fetchMovieById","movieID","fetchCredits","movieId","fetchReviews","useState","reviews","setReviews","error","setError","useParams","useEffect","fetchMovieReviews","id","results","response","console","log","message","length","map","author","content"],"sourceRoot":""}