{"version":3,"file":"static/js/509.ab3f3ae1.chunk.js","mappings":"6SAEMA,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BAETC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,WAAOC,GAAP,+EACT,QACC,OAFQ,SAGJN,EAASO,IAAT,oBAFL,QAEK,YADJ,OACI,iBACwBD,IAJpB,uBAGnBE,EAHmB,EAGnBA,KAHmB,kBAMpBA,GANoB,2CAAH,sDASbC,EAAW,mCAAG,WAAOH,EAAOI,GAAd,yFACFV,EAASO,IAAT,6BAAmCD,EAAnC,kBAAiDI,IAD/C,uBACjBF,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,wDAUXG,EAAc,mCAAG,WAAOC,GAAP,yFACLZ,EAASO,IAAT,iBAAuBK,IADlB,uBACpBJ,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdK,EAAY,mCAAG,WAAOC,GAAP,yFACHd,EAASO,IAAT,iBAAuBO,EAAvB,aADG,uBAClBN,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZO,EAAY,mCAAG,WAAOH,GAAP,yFACHZ,EAASO,IAAT,iBAAuBK,EAAvB,aADG,uBAClBJ,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,qD,+KCrCZQ,EAAWC,EAAAA,GAAAA,GAAH,2HAORC,EAASD,EAAAA,GAAAA,GAAD,iGAKRE,EAAgBF,EAAAA,GAAAA,IAAH,iG,SC4C1B,EAjDkB,WAChB,OAAkCG,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQV,GAAYW,EAAAA,EAAAA,MAAZX,QAcR,OAZAY,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAESd,EAAAA,EAAAA,IAAaC,GAFtB,gBAENc,EAFM,EAENA,KACRN,EAAaM,GAHC,qDAILC,SACTL,GAAS,GALK,yDAAH,qDAQfG,EAAUb,EACX,GAAE,CAACA,KAGF,gCACGS,IAAS,SAACO,EAAA,QAAD,IACTT,EAAUU,QACT,SAACf,EAAD,UACGK,EAAUW,MAAM,EAAG,IAAIC,KAAI,SAAAC,GAAK,OAC/B,UAAChB,EAAD,YACE,gBACEiB,IACED,EAAME,aAAN,0CACuCF,EAAME,cAD7C,kCAIFC,IAAG,UAAKH,EAAMI,SAEhB,UAACnB,EAAD,YACE,uBAAIe,EAAMI,QACV,uCAEE,0BAAOJ,EAAMK,oBAbJL,EAAMM,QADU,OAqBnC,wCAIP,C,0CCnDD,UALqB,WACnB,OACE,0CAEH,C","sources":["Api/api.js","components/Cast/cast.styled.js","components/Cast/Cast.jsx","components/pages/NotFoundPage/NotFoundPage.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: '654dca5a8217a14f67a4e1bec4dc984e',\n  },\n});\n\nexport const fetchTrending = async (page) => {\n  const mediaType = 'movie';\n  const timeWindow = 'week';\n  const { data } = await instance.get(\n    `/trending/${mediaType}/${timeWindow}?page=${page}`\n  );\n  return data;\n};\n\nexport const fetchMovies = async (page , query) => {\n  const { data } = await instance.get(`/search/movie?page=${page}&query=${query}`);\n  return data;\n};\n\nexport const fetchGenres = async () => {\n  const { data } = await instance.get(`/genre/movie/list`);\n  return data.genres;\n};\n\nexport const fetchMovieById = async (movieID) => {\n  const { data } = await instance.get(`/movie/${movieID}`);\n  return data;\n};\n\nexport const fetchCredits = async (movieId) => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const fetchReviews = async (movieID) => {\n  const { data } = await instance.get(`/movie/${movieID}/reviews`);\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  row-gap: 15px;\n  column-gap: 10px;\n`;\n\nexport const CastItem=styled.li`\nborder: 1px solid #a9a9a9;\nbox-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;`\n\n\nexport const ActorInfoWrap = styled.div`\npadding: 5px;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport NotFoundPage from 'components/pages/NotFoundPage/NotFoundPage';\n\nimport { fetchCredits } from 'Api/api';\n\nimport {CastList, CastItem,ActorInfoWrap} from './cast.styled'\n\nconst MovieCast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { cast } = await fetchCredits(movieId);\n        setMovieCast(cast);\n      } catch ({ response }) {\n        setError(true);\n      }\n    };\n    fetchCast(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <NotFoundPage />}\n      {movieCast.length ? (\n        <CastList>\n          {movieCast.slice(0, 12).map(actor => (\n            <CastItem key={actor.cast_id}>\n              <img\n                src={\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/w200/${actor.profile_path}`\n                    : `https://via.placeholder.com/200`\n                }\n                alt={`${actor.name}`}\n              />\n              <ActorInfoWrap>\n                <p>{actor.name}</p>\n                <p>\n                  Character:\n                  <span>{actor.character}</span>\n                </p>\n              </ActorInfoWrap>\n            </CastItem>\n          ))}\n        </CastList>\n      ) : (\n        <p>No results</p>\n      )}\n    </>\n  );\n};\n\nexport default MovieCast;\n","const NotFoundPage = () => {\n  return (\n    <h1>Not Found Page</h1>\n  )\n}\nexport default NotFoundPage;\n"],"names":["instance","axios","baseURL","params","api_key","fetchTrending","page","get","data","fetchMovies","query","fetchMovieById","movieID","fetchCredits","movieId","fetchReviews","CastList","styled","CastItem","ActorInfoWrap","useState","movieCast","setMovieCast","error","setError","useParams","useEffect","fetchCast","cast","response","NotFoundPage","length","slice","map","actor","src","profile_path","alt","name","character","cast_id"],"sourceRoot":""}